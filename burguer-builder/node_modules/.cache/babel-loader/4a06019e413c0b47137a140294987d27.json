{"ast":null,"code":"var _jsxFileName = \"/home/gustavograeff/Gustavo/studies/react-studies/burguer-builder/src/containers/BuguerBuilder/BurguerBuilder.js\";\nimport React, { useState } from 'react';\nimport Aux from '../../hoc/Aux';\nimport Burguer from '../../components/Burguer/Burguer';\nimport BuildControls from '../../components/Burguer/BuildControls/BuildControls';\nimport Modal from '../../components/UI/Modal/Modal';\nimport OrderSummary from '../../components/Burguer/OrderSummary/OrderSummary';\nimport axios from '../../axios-orders';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport WithErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nconst INGREDIENTS_PRICES = {\n  salad: 0.5,\n  cheese: 0.4,\n  meat: 1.3,\n  bacon: 0.7\n};\n\nconst BurguerBuilder = () => {\n  // const [ingredientsState, setIngridientsState] = useState({\n  //   ingredients: {\n  //     salad: 0,\n  //     bacon: 0,\n  //     cheese: 0,\n  //     meat: 0\n  //   },\n  //   totalPrice: 4,\n  //   purchasable: false,\n  //   purchasing: false\n  // });\n  // const updatePurchaseState = (ingredients, totalPrice) => {\n  //   const ingredientsAmount = Object.values(ingredients).reduce((sum, el) => {\n  //     return (sum += el);\n  //   }, 0);\n  //   setIngridientsState({\n  //     ...ingredientsState,\n  //     ingredients,\n  //     totalPrice,\n  //     purchasable: ingredientsAmount > 0\n  //   });\n  // };\n  // const [spinnerState, setSpinnerState] = useState({\n  //   isLoading: false\n  // });\n  // const spinnerHandler = (isLoading) => {\n  //   setSpinnerState({\n  //     isLoading\n  //   });\n  // };\n  // const addIngredientHandler = (type) => {\n  //   const oldIngredientAmount = ingredientsState.ingredients[type];\n  //   const newIngredientAmount = oldIngredientAmount + 1;\n  //   const ingredients = {\n  //     ...ingredientsState.ingredients\n  //   };\n  //   ingredients[type] = newIngredientAmount;\n  //   const priceAddition = INGREDIENTS_PRICES[type];\n  //   const oldPrice = ingredientsState.totalPrice;\n  //   const totalPrice = oldPrice + priceAddition;\n  //   setIngridientsState({\n  //     ...ingredientsState,\n  //     ingredients,\n  //     totalPrice\n  //   });\n  //   updatePurchaseState(ingredients, totalPrice);\n  // };\n  // const removeIngredientHandler = (type) => {\n  //   const oldIngredientAmount = ingredientsState.ingredients[type];\n  //   if (oldIngredientAmount === 0) return;\n  //   const newIngredientAmount = oldIngredientAmount - 1;\n  //   const ingredients = {\n  //     ...ingredientsState.ingredients\n  //   };\n  //   ingredients[type] = newIngredientAmount;\n  //   const priceAddition = INGREDIENTS_PRICES[type];\n  //   const oldPrice = ingredientsState.totalPrice;\n  //   const totalPrice = oldPrice - priceAddition;\n  //   setIngridientsState({\n  //     ...ingredientsState,\n  //     ingredients,\n  //     totalPrice\n  //   });\n  //   updatePurchaseState(ingredients, totalPrice);\n  // };\n  // const purchaseHandler = () => {\n  //   console.log('purchaseHandler');\n  //   setIngridientsState({\n  //     ...ingredientsState,\n  //     purchasing: !ingredientsState.purchasing\n  //   });\n  // };\n  // const purchaseCancel = () => {\n  //   console.log('aaaaaaa');\n  //   purchaseHandler();\n  // };\n  // const purchaseContinue = () => {\n  //   spinnerHandler(true);\n  //   const order = {\n  //     ingredients: ingredientsState.ingredients,\n  //     price: ingredientsState.totalPrice.toFixed(2),\n  //     customer: {\n  //       name: 'Gustavo Graeff',\n  //       address: {\n  //         steert: 'Teststreet 111',\n  //         zipCode: '123456789',\n  //         country: 'Brazil'\n  //       },\n  //       email: 'gustavo@mail.com'\n  //     },\n  //     deliveryMethod: 'fastest'\n  //   };\n  //   axios\n  //     .post('/orders.json', order)\n  //     .then((response) => {\n  //       spinnerHandler(false);\n  //       purchaseHandler();\n  //       console.log(response);\n  //     })\n  //     .catch((error) => {\n  //       spinnerHandler(false);\n  //       purchaseHandler();\n  //       console.log(error);\n  //     });\n  // };\n  const disabledInfo = { ...ingredientsState.ingredients\n  };\n\n  for (let key in disabledInfo) {\n    disabledInfo[key] = disabledInfo[key] <= 0;\n  }\n\n  const ordersToShow = spinnerState.isLoading ? /*#__PURE__*/React.createElement(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 5\n    }\n  }) : /*#__PURE__*/React.createElement(OrderSummary, {\n    ingredients: ingredientsState.ingredients,\n    successClicked: purchaseContinue,\n    dangerClicked: purchaseCancel,\n    price: ingredientsState.totalPrice,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 5\n    }\n  });\n  return /*#__PURE__*/React.createElement(Aux, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Modal, {\n    show: ingredientsState.purchasing,\n    closeModal: purchaseHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }, ordersToShow), /*#__PURE__*/React.createElement(Burguer, {\n    ingredients: ingredientsState.ingredients,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(BuildControls, {\n    ingredientAdded: addIngredientHandler,\n    ingredientRemoved: removeIngredientHandler,\n    disabled: disabledInfo,\n    price: ingredientsState.totalPrice,\n    purschasable: ingredientsState.purchasable,\n    purschasing: purchaseHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default WithErrorHandler(BurguerBuilder, axios);","map":{"version":3,"sources":["/home/gustavograeff/Gustavo/studies/react-studies/burguer-builder/src/containers/BuguerBuilder/BurguerBuilder.js"],"names":["React","useState","Aux","Burguer","BuildControls","Modal","OrderSummary","axios","Spinner","WithErrorHandler","INGREDIENTS_PRICES","salad","cheese","meat","bacon","BurguerBuilder","disabledInfo","ingredientsState","ingredients","key","ordersToShow","spinnerState","isLoading","purchaseContinue","purchaseCancel","totalPrice","purchasing","purchaseHandler","addIngredientHandler","removeIngredientHandler","purchasable"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,GAAP,MAAgB,eAAhB;AACA,OAAOC,OAAP,MAAoB,kCAApB;AACA,OAAOC,aAAP,MAA0B,sDAA1B;AACA,OAAOC,KAAP,MAAkB,iCAAlB;AACA,OAAOC,YAAP,MAAyB,oDAAzB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,qCAApB;AACA,OAAOC,gBAAP,MAA6B,6CAA7B;AAEA,MAAMC,kBAAkB,GAAG;AACzBC,EAAAA,KAAK,EAAE,GADkB;AAEzBC,EAAAA,MAAM,EAAE,GAFiB;AAGzBC,EAAAA,IAAI,EAAE,GAHmB;AAIzBC,EAAAA,KAAK,EAAE;AAJkB,CAA3B;;AAOA,MAAMC,cAAcnB,GAAGC,gBAAgB,CAACC;AADD,GAArB;;AAIA,OAAK,IAAIC,GAAT,IAAgBH,YAAhB,EAA8B;AAC5BA,IAAAA,YAAY,CAACG,GAAD,CAAZ,GAAoBH,YAAY,CAACG,GAAD,CAAZ,IAAqB,CAAzC;AACD;;AAED,QAAMC,YAAY,GAAGC,YAAY,CAACC,SAAb,gBACnB,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADmB,gBAGnB,oBAAC,YAAD;AACE,IAAA,WAAW,EAAEL,gBAAgB,CAACC,WADhC;AAEE,IAAA,cAAc,EAAEK,gBAFlB;AAGE,IAAA,aAAa,EAAEC,cAHjB;AAIE,IAAA,KAAK,EAAEP,gBAAgB,CAACQ,UAJ1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF;AAWA,sBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAER,gBAAgB,CAACS,UAA9B;AAA0C,IAAA,UAAU,EAAEC,eAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGP,YAPH,CADF,eAUE,oBAAC,OAAD;AAAS,IAAA,WAAW,EAAEH,gBAAgB,CAACC,WAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,eAWE,oBAAC,aAAD;AACE,IAAA,eAAe,EAAEU,oBADnB;AAEE,IAAA,iBAAiB,EAAEC,uBAFrB;AAGE,IAAA,QAAQ,EAAEb,YAHZ;AAIE,IAAA,KAAK,EAAEC,gBAAgB,CAACQ,UAJ1B;AAKE,IAAA,YAAY,EAAER,gBAAgB,CAACa,WALjC;AAME,IAAA,WAAW,EAAEH,eANf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,CADF;AAsBD,CAhKD;;AAkKA,eAAelB,gBAAgB,CAACM,cAAD,EAAiBR,KAAjB,CAA/B","sourcesContent":["import React, { useState } from 'react';\nimport Aux from '../../hoc/Aux';\nimport Burguer from '../../components/Burguer/Burguer';\nimport BuildControls from '../../components/Burguer/BuildControls/BuildControls';\nimport Modal from '../../components/UI/Modal/Modal';\nimport OrderSummary from '../../components/Burguer/OrderSummary/OrderSummary';\nimport axios from '../../axios-orders';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport WithErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\n\nconst INGREDIENTS_PRICES = {\n  salad: 0.5,\n  cheese: 0.4,\n  meat: 1.3,\n  bacon: 0.7\n};\n\nconst BurguerBuilder = () => {\n  // const [ingredientsState, setIngridientsState] = useState({\n  //   ingredients: {\n  //     salad: 0,\n  //     bacon: 0,\n  //     cheese: 0,\n  //     meat: 0\n  //   },\n  //   totalPrice: 4,\n  //   purchasable: false,\n  //   purchasing: false\n  // });\n\n  // const updatePurchaseState = (ingredients, totalPrice) => {\n  //   const ingredientsAmount = Object.values(ingredients).reduce((sum, el) => {\n  //     return (sum += el);\n  //   }, 0);\n\n  //   setIngridientsState({\n  //     ...ingredientsState,\n  //     ingredients,\n  //     totalPrice,\n  //     purchasable: ingredientsAmount > 0\n  //   });\n  // };\n\n  // const [spinnerState, setSpinnerState] = useState({\n  //   isLoading: false\n  // });\n\n  // const spinnerHandler = (isLoading) => {\n  //   setSpinnerState({\n  //     isLoading\n  //   });\n  // };\n\n  // const addIngredientHandler = (type) => {\n  //   const oldIngredientAmount = ingredientsState.ingredients[type];\n  //   const newIngredientAmount = oldIngredientAmount + 1;\n  //   const ingredients = {\n  //     ...ingredientsState.ingredients\n  //   };\n  //   ingredients[type] = newIngredientAmount;\n\n  //   const priceAddition = INGREDIENTS_PRICES[type];\n  //   const oldPrice = ingredientsState.totalPrice;\n  //   const totalPrice = oldPrice + priceAddition;\n  //   setIngridientsState({\n  //     ...ingredientsState,\n  //     ingredients,\n  //     totalPrice\n  //   });\n  //   updatePurchaseState(ingredients, totalPrice);\n  // };\n\n  // const removeIngredientHandler = (type) => {\n  //   const oldIngredientAmount = ingredientsState.ingredients[type];\n  //   if (oldIngredientAmount === 0) return;\n\n  //   const newIngredientAmount = oldIngredientAmount - 1;\n  //   const ingredients = {\n  //     ...ingredientsState.ingredients\n  //   };\n  //   ingredients[type] = newIngredientAmount;\n\n  //   const priceAddition = INGREDIENTS_PRICES[type];\n  //   const oldPrice = ingredientsState.totalPrice;\n  //   const totalPrice = oldPrice - priceAddition;\n  //   setIngridientsState({\n  //     ...ingredientsState,\n  //     ingredients,\n  //     totalPrice\n  //   });\n  //   updatePurchaseState(ingredients, totalPrice);\n  // };\n\n  // const purchaseHandler = () => {\n  //   console.log('purchaseHandler');\n  //   setIngridientsState({\n  //     ...ingredientsState,\n  //     purchasing: !ingredientsState.purchasing\n  //   });\n  // };\n\n  // const purchaseCancel = () => {\n  //   console.log('aaaaaaa');\n  //   purchaseHandler();\n  // };\n\n  // const purchaseContinue = () => {\n  //   spinnerHandler(true);\n  //   const order = {\n  //     ingredients: ingredientsState.ingredients,\n  //     price: ingredientsState.totalPrice.toFixed(2),\n  //     customer: {\n  //       name: 'Gustavo Graeff',\n  //       address: {\n  //         steert: 'Teststreet 111',\n  //         zipCode: '123456789',\n  //         country: 'Brazil'\n  //       },\n  //       email: 'gustavo@mail.com'\n  //     },\n  //     deliveryMethod: 'fastest'\n  //   };\n  //   axios\n  //     .post('/orders.json', order)\n  //     .then((response) => {\n  //       spinnerHandler(false);\n  //       purchaseHandler();\n  //       console.log(response);\n  //     })\n  //     .catch((error) => {\n  //       spinnerHandler(false);\n  //       purchaseHandler();\n  //       console.log(error);\n  //     });\n  // };\n\n  const disabledInfo = {\n    ...ingredientsState.ingredients\n  };\n\n  for (let key in disabledInfo) {\n    disabledInfo[key] = disabledInfo[key] <= 0;\n  }\n\n  const ordersToShow = spinnerState.isLoading ? (\n    <Spinner></Spinner>\n  ) : (\n    <OrderSummary\n      ingredients={ingredientsState.ingredients}\n      successClicked={purchaseContinue}\n      dangerClicked={purchaseCancel}\n      price={ingredientsState.totalPrice}\n    ></OrderSummary>\n  );\n\n  return (\n    <Aux>\n      <Modal show={ingredientsState.purchasing} closeModal={purchaseHandler}>\n        {/* <OrderSummary\n          ingredients={ingredientsState.ingredients}\n          successClicked={purchaseContinue}\n          dangerClicked={purchaseCancel}\n          price={ingredientsState.totalPrice}\n        ></OrderSummary> */}\n        {ordersToShow}\n      </Modal>\n      <Burguer ingredients={ingredientsState.ingredients}></Burguer>\n      <BuildControls\n        ingredientAdded={addIngredientHandler}\n        ingredientRemoved={removeIngredientHandler}\n        disabled={disabledInfo}\n        price={ingredientsState.totalPrice}\n        purschasable={ingredientsState.purchasable}\n        purschasing={purchaseHandler}\n      ></BuildControls>\n    </Aux>\n  );\n};\n\nexport default WithErrorHandler(BurguerBuilder, axios);\n"]},"metadata":{},"sourceType":"module"}